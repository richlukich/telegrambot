import telebot
from config import token
from telebot import types
from utils import check_login, check_password
from database import DataBase
from detection import process_photo
import psycopg2
import requests
from PIL import Image
from datetime import datetime, date, time

bot = telebot.TeleBot(token) # —Ç–æ–∫–µ–Ω –ª–µ–∂–∏—Ç –≤ —Ñ–∞–π–ª–µ config.py
fist_name = None
if_login = False
text_prompt = None
prompt = None
file_unique_id = None

db = DataBase()

if not db.check_table_users():
    db.create_table_users()    
'''
try:
    db.create_table_users()
except:
    print ('–¢–∞–±–ª–∏—Ü–∞ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ —É–∂–µ —Å–æ–∑–¥–∞–Ω–∞')

try:
    db.create_table_images()
except:
    print ('–¢–∞–±–ª–∏—Ü–∞ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ —É–∂–µ —Å–æ–∑–¥–∞–Ω–∞')
'''
@bot.message_handler(commands=['start'])
def start(message):
    global first_name
    first_name = message.from_user.first_name
    markup = types.InlineKeyboardMarkup(row_width = 2)
    btn1 = types.InlineKeyboardButton("üíô –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", callback_data = 'registration')
    btn2 = types.InlineKeyboardButton("ü§ç –í—Ö–æ–¥", callback_data = 'login')
    markup.add(btn1, btn2)
    bot.send_message(message.chat.id, text="–ü—Ä–∏–≤–µ—Ç, {0}! –ï—Å–ª–∏ —Ç—ã —É –Ω–∞—Å –ø–µ—Ä–≤—ã–π —Ä–∞–∑, —Ä–µ–≥–∏—Å—Ç—Ä—É–π—Å—è üíô !".format(first_name), reply_markup=markup)

@bot.callback_query_handler(func = lambda call: True)
def callback(call):
    global first_name
    global if_login
    if call.message:
        if call.data == 'registration':
            markup = types.InlineKeyboardMarkup(row_width = 2)
            btn1 = types.InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data = 'decline')
            markup.add(btn1)
            msg = bot.send_message(call.message.chat.id,'–¢–∞–∫-—Å—Å —Å–º–æ—Ç—Ä—é —Ç—ã —É –Ω–∞—Å –ø–µ—Ä–≤—ã–π —Ä–∞–∑ üòé! –ë—ã—Å—Ç—Ä–µ–µ –≤–≤–æ–¥–∏ —Å–≤–æ–π –ª–æ–≥–∏–Ω!', reply_markup=markup)
            bot.register_next_step_handler(message=msg,
                                       callback=registr_login)
            
        if call.data == 'login':
            markup = types.InlineKeyboardMarkup(row_width = 2)
            btn1 = types.InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data = 'decline')
            markup.add(btn1)
            msg = bot.send_message(call.message.chat.id, '–° –≤–æ–∑—Ä–∞—â–µ–Ω–∏–µ–º –¥—Ä—É–≥ ü§ó! –í–≤–æ–¥–∏ –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª!', reply_markup = markup)
            bot.register_next_step_handler(message=msg,
                                       callback=enter_login)
        if call.data == 'decline':
            msg = bot.send_message(call.message.chat.id,'–•–æ—Ä–æ—à–æ, –≤–æ–∑—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
            call.message.from_user.first_name = first_name
            start(call.message)
        if call.data == 'detection':
            msg = bot.send_message(call.message.chat.id,'–ó–∞–≥—Ä—É–∑–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é:')
        if call.data == 'more':
            if_login = True
            msg = bot.send_message(call.message.chat.id,'–ó–∞–≥—Ä—É–∑–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é:')
        
@bot.message_handler(content_types=['text'])
def registr_login(message):
    global login
    markup = types.InlineKeyboardMarkup(row_width = 2)
    btn1 = types.InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data = 'decline')
    markup.add(btn1)
    
    if check_login(message.text):
        if db.check_login(str(message.text)):
            login = message.text
            msg = bot.send_message(message.chat.id,'–ö—Ä—É—Ç–æ! –í–≤–≤–æ–¥–∏ –ø–∞—Ä–æ–ª—å',reply_markup=markup)
            bot.register_next_step_handler(message=msg,
                                            callback=registr_password)
        else:
            msg = bot.send_message(message.chat.id,'–¢–∞–∫–æ–π –ª–æ–≥–∏–Ω —É–∂–µ –∑–∞–Ω—è—Ç! –í–≤–µ–¥–∏ –¥—Ä—É–≥–æ–π!', reply_markup=markup)
            bot.register_next_step_handler(msg, registr_login)    
    else:
        msg = bot.send_message(message.chat.id,'–õ–æ–≥–∏–Ω –¥–æ–ª–∂–µ–Ω —Å–æ—Å—Ç–æ—è—Ç—å —Ç–æ–ª—å–∫–æ –∏–∑ –±—É–∫–≤ –∏ —Ü–∏—Ñ—Ä! –í–≤–µ–¥–∏ –µ—â–µ —Ä–∞–∑!', reply_markup=markup)
        bot.register_next_step_handler(msg, registr_login)
@bot.message_handler(content_types=['text'])
def enter_login(message):
    global if_login
    global login_user
    markup = types.InlineKeyboardMarkup(row_width = 2)
    btn1 = types.InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data = 'decline')
    markup.add(btn1)

    if len(message.text.split(' ')) == 2:
        login , password = message.text.split(' ')[0], message.text.split(' ')[1]
        if db.check_login_password(login, password):
            markup = types.InlineKeyboardMarkup(row_width = 2)
            btn1 = types.InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data = 'decline')
            markup.add(btn1)
            msg = bot.send_message(message.chat.id,'–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å! –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑!',reply_markup = markup)
            bot.register_next_step_handler(msg, enter_login)
        else:
            login_user = login
            markup = types.InlineKeyboardMarkup(row_width = 2)
            btn1 = types.InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data = 'decline')
            btn2 = types.InlineKeyboardButton("–ù–∞–≤–∞–ª–∏—Ç—å –∫—Ä–∏–Ω–∂–∞", callback_data = 'detection')
            markup.add(btn1, btn2)
            msg = bot.send_message(message.chat.id,'–í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω! –ü–æ—Ä–∞ –Ω–∞–≤–∞–ª–∏—Ç—å –∫—Ä–∏–Ω–∂–∞!', reply_markup = markup) 
            if_login = True  
    else:
        markup = types.InlineKeyboardMarkup(row_width = 2)
        btn1 = types.InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data = 'decline')
        markup.add(btn1)
        msg = bot.send_message(message.chat.id,'–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞! –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑', reply_markup = markup)
        bot.register_next_step_handler(msg, enter_login)       
@bot.message_handler(content_types=['text'])      
def registr_password(message):
    global password
    if check_password(message.text) == '–ü–æ–∑–¥—Ä–∞–≤–ª—è—é —Ç—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!':
        password = message.text
        insert_to_db_users()
        bot.send_message(message.chat.id, check_password(message.text))
        start(message)

    else:
        msg = bot.send_message(message.chat.id,check_password(message.text))
        bot.register_next_step_handler(msg, registr_password)

def insert_to_db_users():
    global login
    global password
    db.insert_user(str(login), str(password))

def insert_to_db_images(image_bin, uploaded_on):
    global login_user
    global file_unique_id
    db.insert_images(str(login_user), str(file_unique_id), image_bin)

@bot.message_handler(content_types=['photo'])
def photo(message):
    if if_login:
        global file_unique_id
        fileID = message.photo[-1].file_id
        file_info = bot.get_file(fileID)
        downloaded_file = bot.download_file(file_info.file_path)
        file_unique_id = file_info.file_unique_id
        #file_path = requests.get(f'https://api.telegram.org/bot{token}/getFile?file_id={fileID}').json()['result']['file_path']
        #img = Image.open(requests.get(f'https://api.telegram.org/file/bot{token}/{file_path}', stream=True).raw)
        #img_bin = img.convert('1')
        #uploaded_on = datetime.now()
        #insert_to_db_images(img_bin, uploaded_on = uploaded_on)
        with open(f'images/{file_unique_id}.jpg', 'wb') as new_file:
            new_file.write(downloaded_file)
            msg = bot.send_message(message.chat.id,'–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –ø–∏—à–∏ –∫–æ–≥–æ –∏—â–µ–º –Ω–∞ —Ñ–æ—Ç–æ (–¥–ª—è –ª—É—á—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞ –ø–∏—à–∏ –∑–∞–ø—Ä–æ—Å –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º)')
            bot.register_next_step_handler(msg, save_text_prompt)

    else:
        bot.send_message(message.chat.id,'–í–æ–π–¥–∏ —Å–Ω–∞—á–∞–ª–∞ –≤ —Å–∏—Å—Ç–µ–º—É!')
        start(message)

@bot.message_handler(content_types=['text'])
def save_text_prompt(message):
    global text_prompt
    text_prompt = message.text
    msg = bot.send_message(message.chat.id,'–ù–∞–ø–∏—à–∏ –Ω–∞ —á—Ç–æ –∑–∞–º–µ–Ω–∏—Ç—å —ç—Ç–æ—Ç –æ–±—ä–µ–∫—Ç? (–¥–ª—è –ª—É—á—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞ –ø–∏—à–∏ –∑–∞–ø—Ä–æ—Å –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º)')
    bot.register_next_step_handler(msg, save_prompt)

@bot.message_handler(content_types=['text'])
def save_prompt(message):
    global prompt
    prompt = message.text
    msg = bot.send_message(message.chat.id,'–í—Å–µ –∫—Ä—É—Ç–æ! –ü–æ–¥–æ–∂–¥–∏ –±—É–∫–≤–∞–ª—å–Ω–æ –ø–∞—Ä—É –º–∏–Ω—É—Ç –ø–æ–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∞–µ—Ç—Å—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...')
    make_prediction(message)

def make_prediction(message):
    global if_login
    
    pred_image = process_photo(IMAGE_PATH = f'images/{file_unique_id}.jpg',
                               TEXT_PROMPT = text_prompt,
                               prompt = prompt)
    msg = bot.send_message(message.chat.id, '–¢–≤–æ–µ —Ñ–æ—Ç–æ –≥–æ—Ç–æ–≤–æ! –ü–æ–ª—É—á–∞–π:')
    photo = open('images/' + file_unique_id + '_pred.jpg', 'rb')
    bot.send_photo(message.chat.id, photo)
    if_login = False

    markup = types.InlineKeyboardMarkup(row_width = 2)
    btn1 = types.InlineKeyboardButton("–ï—â–µ!", callback_data = 'more')
    btn2 = types.InlineKeyboardButton("–í—ã—Ö–æ–¥!", callback_data = 'decline')
    markup.add(btn1, btn2)  
    msg = bot.send_message(message.chat.id, '–ï—â–µ? –ò–ª–∏ –≤—ã—Ö–æ–¥?', reply_markup = markup) 
bot.polling(none_stop=True)
